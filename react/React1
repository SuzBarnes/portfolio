React Lecture 1
camelCase = small letter then capital letter camelCaseCharacteristics
PascalCase = component names, each word starts with a capital. SchoolName HelloThere etc
SCREAMING_SNAKE_CASE - used for constants eg const API_CHANGER

Array methods:
evaluate the expression, can include this in jsx

const array = [1,2,3,4]
array.length
array.map(item => item *2) (returns a new array [2,4,6,8]
array.forEach(item => console.log(item)) itll console.log 1 2 3 4
array.find(item => item ===2) //2
array.filter(item => item %2 ===1) //returns a new array [1, 3] only returns the true items (odd)

array.pop() // returns last item & updates array: [1,2,3]
array.push(4) // adds the item to the end of the array so [1,2,3] becomes [1,2,3,4]

array.shift() returns first item and updates arrray [2,3,4]
array.unshift(1) adds the item to the beginning of the array (so it becomes [1,2,3,4] and returns the new length: 4

array.some((item) => item ===2) checks if at least 1 item passes the test
array.every((item) => item ===2) checks if all the items pass the test

Objects:
you can access using dot notation
console.log(user.firstName)
console.log(user.authenticated())

access using bracket notation if you DON'T KNOW what the key is:
console.log(user['firstName'])
console.log(user['authenticated']())

Destructuring:
where you define variables for an array/object much more easily
const array = [1,2,3]
const user = {name: 'John', age: 48}

so you can do
const [one, two] = array (there one will = 1, two = 2) (DOES matter about the order)
const {name,array} = user // name takes the value 'John' and age = 48 (doesnt matter about the order)

Spreading:
const [,...rest]=array // , means skip the first value, ... means the rest of, rest takes the value [2,3]
const copy = {...user, height: 167} // copy will have the properties of user and an extra one with key height.

Functions:
if you havent named the function it will be an anonomyous function.
ES6 has arrow fucntions;
this is where you declare a variable with const then 
if you only have one line of code then you don't need a return, itll return whatever the arrow is pointing at. So you don't need {} or a return.

Conditional(ternary) operator:
const isLoggedIn = true
console.log(isLoggedIn ? 'logged in' : 'logged out')

so the ? means it is a ternary operator
if the statement is true, then it will display the LHS 'logged in' and if it is false it will display the thing on the right

Nullish Coalescing Operators and Logical OR:
const number = fetchFromBackend()

while th request is not resolved
console.log(`${number || 'Loading...'}`)
console.log(`${number ?? 'Loading...'}`)

//first console.log will print 'Loading...'
the second will print 'Loading...'

if the number resolves to 87
console.log(`${number || 'Loading...'}`)
console.log(`${number ?? 'Loading...'}`)

first console.log will print 87
second console.log will print 87

if the number resolves to 0
console.log(`${number || 'Loading...'}`)
console.log(`${number ?? 'Loading...'}`)
first console.log will print 'Loading...' //not what we want
//second one will print 0 the actual number we need

Optional chaining(?.)
cons user = {name: 'John'}
console.log(user.name)
console.log will print 'John'
console.log(user.address.town) WONT read properly
console.log(user.address?.town) will not fail, will resolve with undefined.

React component:
react compoonents must be PascalCase (capital letter on each word)
you write it like it is html but we can nest in other components.

Line 1: give your component a name
Line 2: define what should be returned and rendered by the client
Line 9: export component

any app made with react and inspect element -  you'll see normal html, react will help compile your components into something y ou can use.
jsx is what the tutors component is returning. looks almost like html.

uses a virtual dom which:
targets multiple devices
separation of concerns between actual dom manipulation and application state
performance increase

eg document.querySelector() performs worse than traversing the DOM

JSX is a type of syntax. A markup language like html which allows us to define react components in a declarative way.
{const awesome = true}

tutor component is a child of the cohort component. the tutor component is nested into cohort.
if you export one thing you just write
export default NAME

when naming files could be example.jsx rather than .js that means it will be react

need to import React from 'react'

const Header = () => {
return (
<div>
<h2> Header </h2>
<h4> Name</h4>
</div>
)
}
export default Header

need to make sure it is linked to your App.js file, import the header and make sure it is in your App function.

need to have a key for every child that you have otherwise when you inspect element it will not work.

